{{- if .Values.ingress.enabled }}
{{- $fullName := include "moondream-station.fullname" . -}}
{{- $svcPort := .Values.service.port -}}
{{- if and .Values.ingress.className (not (hasKey .Values.ingress.annotations "kubernetes.io/ingress.class")) }}
  {{- $_ := set .Values.ingress.annotations "kubernetes.io/ingress.class" .Values.ingress.className}}
{{- end }}
{{- if and .Values.ingress.className (not (hasKey .Values.ingress.annotations "kubernetes.io/ingress.class")) }}
  {{- $_ := set .Values.ingress.annotations "kubernetes.io/ingress.class" .Values.ingress.className}}
{{- end }}
{{- if semverCompare ">=1.19-0" .Capabilities.KubeVersion.GitVersion -}}
apiVersion: networking.k8s.io/v1
{{- else if semverCompare ">=1.14-0" .Capabilities.KubeVersion.GitVersion -}}
apiVersion: networking.k8s.io/v1beta1
{{- else -}}
apiVersion: extensions/v1beta1
{{- end }}
kind: Ingress
metadata:
  name: {{ $fullName }}
  labels:
    {{- include "moondream-station.labels" . | nindent 4 }}
  {{- with .Values.ingress.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- if and .Values.ingress.className (not (hasKey .Values.ingress.annotations "kubernetes.io/ingress.class")) }}
  ingressClassName: {{ .Values.ingress.className }}
  {{- end }}
  {{- if .Values.ingress.tls }}
  tls:
    {{- range .Values.ingress.tls }}
    - hosts:
        {{- range .hosts }}
        - {{ . | quote }}
        {{- end }}
      secretName: {{ .secretName }}
    {{- end }}
  {{- end }}
  rules:
    {{- range .Values.ingress.hosts }}
    - host: {{ .host | quote }}
      http:
        paths:
          {{- range .paths }}
          - path: {{ .path }}
            {{- if and .pathType (semverCompare ">=1.18-0" $.Capabilities.KubeVersion.GitVersion) }}
            pathType: {{ .pathType }}
            {{- end }}
            backend:
              {{- if semverCompare ">=1.19-0" $.Capabilities.KubeVersion.GitVersion }}
              service:
                name: {{ $fullName }}
                port:
                  number: {{ $svcPort }}
              {{- else }}
              serviceName: {{ $fullName }}
              servicePort: {{ $svcPort }}
              {{- end }}
          {{- end }}
    {{- end }}
{{- end }}

1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "moondream-station.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "moondream-station.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "moondream-station.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "moondream-station.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Test the API endpoints:

   # Health check
   curl http://localhost:8080/health

   # Generate caption (replace with your image)
   curl -X POST "http://localhost:8080/v1/caption" \
     -F "image=@your_image.jpg" \
     -F "length=short"

   # Ask a question about an image
   curl -X POST "http://localhost:8080/v1/query" \
     -F "image=@your_image.jpg" \
     -F "question=What do you see in this image?"

   # Detect objects in an image
   curl -X POST "http://localhost:8080/v1/detect" \
     -F "image=@your_image.jpg" \
     -F "object_name=person"

   # Point to objects in an image
   curl -X POST "http://localhost:8080/v1/point" \
     -F "image=@your_image.jpg" \
     -F "object_name=car"

3. Run the test suite:
   python app/test_api.py

{{- if .Values.persistence.enabled }}
{{- if .Values.persistence.modelCache.enabled }}
4. Model pre-loading status:
   kubectl get jobs --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "moondream-station.name" . }},app.kubernetes.io/component=model-download"
   kubectl logs --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "moondream-station.name" . }},app.kubernetes.io/component=model-download"
{{- end }}
{{- end }}

{{- if .Values.probes.liveness.enabled }}
5. Health checks are enabled. The service will automatically restart if it becomes unhealthy.
{{- end }}

{{- if .Values.resources }}
6. Resource limits are configured:
   CPU: {{ .Values.resources.limits.cpu | default "unlimited" }}
   Memory: {{ .Values.resources.limits.memory | default "unlimited" }}
   {{- if .Values.resources.limits."nvidia.com/gpu" }}
   GPU: {{ .Values.resources.limits."nvidia.com/gpu" }}
   {{- end }}
{{- end }}

For more information, visit: https://github.com/Mad-Deecent/moondream-station-helm
